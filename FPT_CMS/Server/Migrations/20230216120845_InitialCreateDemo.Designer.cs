// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Entity;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230216120845_InitialCreateDemo")]
    partial class InitialCreateDemo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Server.Entity.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("SubjectCode");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Server.Entity.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurriculumId"), 1L, 1);

                    b.Property<string>("CurriculumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Majors")
                        .HasColumnType("int");

                    b.HasKey("CurriculumId");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("Server.Entity.CurriculumDetail", b =>
                {
                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectCode1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CurriculumId", "SubjectCode");

                    b.HasIndex("SubjectCode1");

                    b.ToTable("CurriculumDetails");
                });

            modelBuilder.Entity("Server.Entity.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Server.Entity.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Majors")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentRollNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Server.Entity.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectCode");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Server.Entity.Course", b =>
                {
                    b.HasOne("Server.Entity.Subject", null)
                        .WithMany("Courses")
                        .HasForeignKey("SubjectCode");
                });

            modelBuilder.Entity("Server.Entity.CurriculumDetail", b =>
                {
                    b.HasOne("Server.Entity.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Entity.Subject", null)
                        .WithMany("Details")
                        .HasForeignKey("SubjectCode1");

                    b.Navigation("Curriculum");
                });

            modelBuilder.Entity("Server.Entity.Student", b =>
                {
                    b.HasOne("Server.Entity.Curriculum", null)
                        .WithMany("Students")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Entity.Subject", b =>
                {
                    b.HasOne("Server.Entity.Department", null)
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Server.Entity.Curriculum", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Server.Entity.Department", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Server.Entity.Subject", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
